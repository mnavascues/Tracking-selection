initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral //
	initializeMutationType("m2", 0.5, "f", 0.5); // beneficial //
	m1.mutationStackPolicy = "s"; 
	m2.mutationStackPolicy = "s"; 
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = T; 
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m1, 1.0);
	initializeGenomicElement(g1, 0, 499999);
	initializeGenomicElement(g2, 500001, 999999);
	
	initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(499999, 500000, 999999));	
}

1 {
	sim.chromosome.colorSubstitution = "";
	sim.addSubpop("p0", 500); // Population size that is sampled from prior//
}

5000 late() { // all the generation are conditional to the sample size defined below -  benefitial arises after 10*n//
	dnovo = sample(sim.subpopulations.genomes, 1);
	if (dnovo.countOfMutationsOfType(m2) == 0)
		 dnovo.addNewDrawnMutation(m2, 1);	
	
	m2.convertToSubstitution = F;	 
}

5024 late(){
	m1.convertToSubstitution = F;
}

5025 late(){ // Sampling in time 1 is T1 = (10*n) + 25 generations
	
	// BEGIN::Print mutation information //
	u = sim.subpopulations.individuals;
	g = u.genomes;
	m = sortBy(unique(g.mutations), "position"); 
	mp = (m.position +1);
	mi = m.id;
	mf = sim.mutationFrequencies(subpops=NULL,mutations=m);
	ma = m.originGeneration;
	mc = m.selectionCoeff;
	
	chr = ifelse(mp > 500000, paste("chr2"), paste("chr1"));
	mps = sapply(mp, "if (applyValue > 500000) paste(applyValue - 500000); else paste(applyValue);");
	status = repEach(paste("NS"), size(m));
	alleles = repEach(paste("A,T"), size(m));
	
	header = paste("chrom"+"\t"+"position"+"\t"+"muID"+"\t"+"mufreq"+"\t"+"muage"+"\t"+"status"+"\t"+"selCoeff"+"\t"+"alleles"+"\n");
	mutInf = paste(chr+"\t"+mps+"\t"+format("%d",mi)+"\t"+format("%.3f",mf)+"\t"+format("%d",ma)+"\t"+status+"\t"+format("%.3f",mc)+"\t"+alleles+"\n");
	mutInf = header + mutInf;
	writeFile("~/mutInfo_t1.txt", mutInf);
	// END::Print mutation information //
	
	// BEGIN::Print genotypes //
	su = sample(u, 100, F);
	
	genos = NULL; 
	for (si in su)
	{
		hp1 = (asInteger(match(m,sortBy(unique(si.genomes[0].mutations), "position")) >=0)+1);
		hp2 = (asInteger(match(m,sortBy(unique(si.genomes[1].mutations), "position")) >=0)+1);
		
		genoLine = paste(hp1 + '' + hp2, "\t");
		genos = c(genos, genoLine);
	}
	
	genomatrix = paste(genos, "\n");
	writeFile("~/genotypes_t1.txt", genomatrix);
	// END::Print genotypes //
}	

5026 late(){
	m1.convertToSubstitution = T; // add this to the main model1 code, but not before the first sampling //
}

5049 late(){
	m1.convertToSubstitution = F; // add this to the main model1 code, but not before the first sampling //
}

5050 late(){ // Sampling in time 2 is: T2 = T1 + 25)
	
	// BEGIN::Print mutation information //
	u = sim.subpopulations.individuals;
	g = u.genomes;
	m = sortBy(unique(g.mutations), "position"); 
	mp = (m.position +1);
	mi = m.id;
	mf = sim.mutationFrequencies(subpops=NULL,mutations=m);
	ma = m.originGeneration;
	mc = m.selectionCoeff;
	
	chr = ifelse(mp > 500000, paste("chr2"), paste("chr1"));
	mps = sapply(mp, "if (applyValue > 500000) paste(applyValue - 500000); else paste(applyValue);");
	status = repEach(paste("NS"), size(m));
	alleles = repEach(paste("A,T"), size(m));
	
	header = paste("chrom"+"\t"+"position"+"\t"+"muID"+"\t"+"mufreq"+"\t"+"muage"+"\t"+"status"+"\t"+"selCoeff"+"\t"+"alleles"+"\n");
	mutInf = paste(chr+"\t"+mps+"\t"+format("%d",mi)+"\t"+format("%.3f",mf)+"\t"+format("%d",ma)+"\t"+status+"\t"+format("%.3f",mc)+"\t"+alleles+"\n");
	mutInf = header + mutInf;
	writeFile("~/mutInfo_t2.txt", mutInf);
	// END::Print mutation information //

	// BEGIN::Print genotypes //
	su = sample(u, 100, F);
	
	genos = NULL;
	for (si in su)
	{
		hp1 = (asInteger(match(m,sortBy(unique(si.genomes[0].mutations), "position")) >=0)+1);
		hp2 = (asInteger(match(m,sortBy(unique(si.genomes[1].mutations), "position")) >=0)+1);
	
		genoLine = paste(hp1 + '' + hp2, "\t");
		genos = c(genos, genoLine);	
	
	}	
	
	genomatrix = paste(genos, "\n");
	writeFile("~/genotypes_t2.txt", genomatrix);
	// END::Print genotypes //
	
	sim.simulationFinished();	
} 