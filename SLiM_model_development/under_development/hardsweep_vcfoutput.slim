// Model 1 - Hard Sweep: de novo mutation that rapidly reach fixation when it arises;
// N1 - This model explicitly implements 2 temporal samples - works were n < Ne//

// Neutral starts at generation 0 but Beneficial mutation starst at generation 1;
// Neutral mutation has a fixed selection coefficient = 0 and can randomly arise in any chromossome;
// Beneficial mutation, however, happens in a specific point position of the chromossome 2;
// Beneficial mutation also has a fixed selection coefficient;
 
initialize() {
	initializeMutationRate(1e-7); // Florian MS - u=2.5e-8 // Increased to have more mutations
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral //
	initializeMutationType("m2", 1.0, "f", 0.5); // beneficial - same as in Florian MS - unrealistic cap is s=0.5 //
	m1.mutationStackPolicy = "s"; // "s" for default; "f" for the first and "l" for the last //
	m2.mutationStackPolicy = "s"; // "s" for default; "f" for the first and "l" for the last //
	m1.convertToSubstitution = T; // add this to the main model1 code, but not before the 10*Ne equilibrium //
	m2.convertToSubstitution = T; // add this to the main model1 code, but not before the 10*Ne equilibrium //
	m1.color = "gray40";
	m2.color = "green";
	m1.colorSubstitution = "gray20";
	m2.colorSubstitution = "darkgreen";
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m1, 1.0);
	g1.color = "black";
	g2.color = "black";	
	initializeGenomicElement(g1, 0, 49999);
	initializeGenomicElement(g2, 50001, 99999);
	
	initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));	
}

1 {
	sim.chromosome.colorSubstitution = "";
	sim.addSubpop("p0", 500); // Effective population size - Same as in Florian MS - Ne=1000 - but this is a parameter //
}

5000 late() {
	// Wait until MD-Equilibrium to add the beneficial mutation;
	// It explicitly sample one genome from the entire simulation and add a new/denovo benefitial mutation //
	// It is similar to the "addtion" of a new mutations during gametogenesisthis //
	// This mutation will have higher fitness //
	dnovo = sample(sim.subpopulations.genomes, 1);
	if (dnovo.countOfMutationsOfType(m2) == 0)
		 dnovo.addNewDrawnMutation(m2, 1);
	
	m2.convertToSubstitution = F; // add this to the main model1 code, but not before the 10*Ne equilibrium //
}

5024 late(){
	m1.convertToSubstitution = F; // add this to the main model1 code, but not before the first sampling //
}

5025 late(){ 
	allIndividuals = sim.subpopulations.individuals; 
	w = asFloat(allIndividuals.countOfMutationsOfType(m2) + 1);  
	sampledIndividuals = sample(allIndividuals, 10, weights=w);
	sampledIndividuals = sample(allIndividuals, 100);
	sampledIndividuals.genomes.outputVCF(); 
	
}	

5026 late(){
	m1.convertToSubstitution = T; // add this to the main model1 code, but not before the first sampling //
}

5049 late(){
	m1.convertToSubstitution = F; // add this to the main model1 code, but not before the first sampling //
}

5100 late(){ 
	allIndividuals = sim.subpopulations.individuals; 
	//w = asFloat(allIndividuals.countOfMutationsOfType(m2) + 1);  
	//sampledIndividuals = sample(allIndividuals, 10, weights=w);
	sampledIndividuals = sample(allIndividuals, 100);
	sampledIndividuals.genomes.outputVCF(); 
	
	sim.simulationFinished();	
} 