// V1 - This model explicitly implement 2 temporal samples
initialize() {
	initializeMutationRate(2.5e-8); 	// Same as in Florian MS - u=2.5e-8 //
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral //
	initializeMutationType("m2", 0.5, "f", 0.1); // beneficial - same as in Florian MS (s=0.1) - an unrealistic cap is s=0.5 //
	m1.convertToSubstitution = F; // add this to the main model1 code //
	m2.convertToSubstitution = F; // add this to the main model1 code //
	m1.color = "gray40";
	m2.color = "green";
	m1.colorSubstitution = "gray20";
	m2.colorSubstitution = "darkgreen";
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m1, 1.0);
	g1.color = "black";
	g2.color = "black";	
	initializeGenomicElement(g1, 0, 49999);
	initializeGenomicElement(g2, 50001, 99999);
	
	initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));	
}

1 {
	sim.chromosome.colorSubstitution = "";
	sim.addSubpop("p0", 1000); // Same as in Florian MS - N=1000 //
}

10000 late() {
	// It explicitly sample one genome from the entire simulation and add a new/denovo benefitial mutation //
	// It is similar to the "addtion" of a new mutations during gametogenesisthis //
	// This mutation will have higher fitness //
	dnovo = sample(sim.subpopulations.genomes, 1);
	dnovo.addNewDrawnMutation(m2, 0);
}	

10010 late(){
	
	u = sim.subpopulations.individuals;
	g = u.genomes;
	m = sortBy(unique(g.mutations), "position"); 
	mp = m.position;
	mi = m.id;
	mc = m.selectionCoeff;

	mfA = sim.mutationFrequencies(subpops=NULL,mutations=m);
	mfR = (1-mfA); 
	
	chr = ifelse(mp > 50000, paste("chr2"), paste("chr1"));
	sel = ifelse(mc != 0, paste("Y"), paste("N"));
	
	cat("\n\nsegsites: " + size(m) + "\n\n");
	cat(paste("chrom"+"\t"+"pos"+"\t"+"id"+"\t"+"selection"+"\t"+"selCoeff"+"\t"+"fR"+"\t"+"fA"+"\n"));
	cat(paste(chr+"\t"+format("%5d",mp)+"\t"+format("%d",mi)+"\t"+sel+"\t"+format("%.2f",mc)+"\t"+format("%.4f",mfR)+"\t"+format("%.4f",mfA)+"\n"));
	
	//su = sample(u, 10, F);
	
	//for (si in su){
	
	//	hp1 = (asInteger(match(m,sortBy(unique(si.genomes[0].mutations), "position")) >=0)+1);
	//	hp2 = (asInteger(match(m,sortBy(unique(si.genomes[1].mutations), "position")) >=0)+1);
	//	cat(paste(hp1 + '' + hp2) + "\n\n");
	//}

}	

10020 late(){

	u = sim.subpopulations.individuals;
	g = u.genomes;
	m = sortBy(unique(g.mutations), "position"); 
	mp = m.position;
	mi = m.id;
	mc = m.selectionCoeff;
	
	mfA = sim.mutationFrequencies(subpops=NULL,mutations=m);
	mfR = (1-mfA); 

	chr = ifelse(mp > 50000, paste("chr2"), paste("chr1"));
	sel = ifelse(mc != 0, paste("Y"), paste("N"));
	
	cat("\n\nsegsites: " + size(m) + "\n\n");
	cat(paste("chrom"+"\t"+"pos"+"\t"+"id"+"\t"+"selection"+"\t"+"selCoeff"+"\t"+"fR"+"\t"+"fA"+"\n"));
	cat(paste(chr+"\t"+format("%5d",mp)+"\t"+format("%d",mi)+"\t"+sel+"\t"+format("%.2f",mc)+"\t"+format("%.4f",mfR)+"\t"+format("%.4f",mfA)+"\n"));
	
	//su = sample(u, 10, F);
	
	//for (si in su){
	
	//	hp1 = (asInteger(match(m,sortBy(unique(si.genomes[0].mutations), "position")) >=0)+1);
	//	hp2 = (asInteger(match(m,sortBy(unique(si.genomes[1].mutations), "position")) >=0)+1);
	//	cat(paste(hp1 + '' + hp2) + "\n\n");
	//}	
	
	sim.simulationFinished();
	
} 

// Come back in this latter
// Implementation of the for loop to print genotypes in colunms
// This if for the better implementation of the genotypes - custom output
	//for (i in 0:(size(m)-1)){
	//hp1 = (asInteger(match(m[0],u[0].genomes[0].mutations[0]) >=0)+1);  // chech which one is more appropriate
	//hp2 = (asInteger(match(m[0],u[0].genomes[1].mutations[0]) >=0)+1);
	//gen = paste(hp1 + '' + hp2 + "\n");
	
	
	//cat(paste(chr[0]+"\t"+format("%5d",mp[0])+"\t"+format("%d",mi[0])+"\t"+sel[0]+"\t"+format("%.2f",mc[0])+"\t"+gen+"\n"));
	//}