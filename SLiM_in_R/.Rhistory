xlab=expression(pi),
ylab=expression(log[10]*theta),
pch=20,log="x")
partition.tree(regression_tree,
ordvars=c("pi","theta"),
add=T,cex=1.5,col="blue",lwd=2)
for (i in 1:100){
random_sample <- sample(length(theta),size=100,replace=T)
ref_table_random_sample <- ref_table[random_sample,]
regression_tree_random_sample <- tree(log10(theta) ~ pi,
data=ref_table_random_sample)
partition.tree(regression_tree_random_sample,
ordvars=c("pi","theta"),
add=T,cex=1.5,col="red",lwd=1)
}
ref_table <- data.frame(sim_model,sim_SS[,-5])
model_RF <- abcrf(formula = sim_model~.,
data    = ref_table,
lda     = F,
ntree   = 500,
paral   = T)
plot(model_RF,
training=ref_table)
model_RF$prior.err #! How the error is calculated?
err.abcrf(model_RF,
training=ref_table,
paral=T) #! What does this error mean?
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions
rowSums(predict(object=model_RF$model.rf,predict.all = TRUE,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions==1) #! ??
model_selection_result_RF <- predict(object         = model_RF,
obs            = as.data.frame(rbind(target1_SS,target2_SS)),
training       = ref_table,
ntree          = 500,
paral          = T,
paral.predict  = T)
(model_selection_result_RF) #! result for each dataset
rbind(target1_SS,target2_SS)
log10theta <- log10(ref_table_params[modelV,"theta1"]) #! why only theta1
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
head(sim_model)
head(ref_table)
sim_model
dim(ref_table)
sim_model
TajD
FuLiD
plot(ref_table$TajD[which(sim_model=="V")],
ref_table$FuLiD[which(sim_model=="V")],
xlab="Tajima's D",
ylab="Fu and Li's D",
pch=20)
TajD   <- sim_SS[,"TD"]
FuLiD  <- sim_SS[,"FLD"]
ref_table <- data.frame(sim_model,TajD,FuLiD)
classification_tree <- tree(sim_model ~ TajD + FuLiD,
data=ref_table)
plot(classification_tree)
text(classification_tree,cex=0.75)
plot(ref_table$TajD[which(sim_model=="V")],
ref_table$FuLiD[which(sim_model=="V")],
xlab="Tajima's D",
ylab="Fu and Li's D",
pch=20)
points(ref_table$TajD[which(sim_model=="C")],
ref_table$FuLiD[which(sim_model=="C")],
col="grey",pch=20)
partition.tree(classification_tree,
ordvars=c("TajD","FuLiD"),
add=T,cex=3,col="red")
theta     <- ref_table_params[modelC,"theta0"]
pi        <- sim_SS[modelC,"pi"]
ref_table <- data.frame(theta,pi)
theta,pi
head(ref_table)
ref_table <- data.frame(theta,pi)
regression_tree <- tree(log10(theta) ~ pi,
data=ref_table)
plot(regression_tree)
text(regression_tree,cex=0.75)
plot(ref_table$pi,
log10(ref_table$theta),
xlab=expression(pi),
ylab=expression(log[10]*theta),
pch=20,log="x")
partition.tree(regression_tree,
ordvars=c("pi","theta"),
add=T,cex=1.5,col="blue",lwd=2)
for (i in 1:100){
random_sample <- sample(length(theta),size=100,replace=T)
ref_table_random_sample <- ref_table[random_sample,]
regression_tree_random_sample <- tree(log10(theta) ~ pi,
data=ref_table_random_sample)
partition.tree(regression_tree_random_sample,
ordvars=c("pi","theta"),
add=T,cex=1.5,col="red",lwd=1)
}
head(sim_SS[,-5])
dim(sim_SS[,-5])
length(sim_model)
ref_table <- data.frame(sim_model,sim_SS[,-5])
model_RF <- abcrf(formula = sim_model~.,
data    = ref_table,
lda     = F,
ntree   = 500,
paral   = T)
plot(model_RF,
training=ref_table)
model_RF$prior.err #! How the error is calculated?
err.abcrf(model_RF,
training=ref_table,
paral=T) #! What does this error mean?
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions
rowSums(predict(object=model_RF$model.rf,predict.all = TRUE,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions==1) #! ??
sim_SS[,-5]
model_selection_result_RF <- predict(object         = model_RF,
obs            = as.data.frame(rbind(target1_SS,target2_SS)),
training       = ref_table,
ntree          = 500,
paral          = T,
paral.predict  = T)
(model_selection_result_RF) #! result for each dataset
log10theta <- log10(ref_table_params[modelV,"theta1"]) #! why only theta1
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
save.image(file = "results/workspaceFile.RData")
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions
rowSums(predict(object=model_RF$model.rf,predict.all = TRUE,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions==1) #! ??
log10theta <- log10(ref_table_params[modelV,"theta1"]) #! why only theta1
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
load(file = "results/workspaceFile.RData")
log10theta <- log10(ref_table_params[modelV,"theta1"]) #! why only theta1
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
library("phyclust") # for a version of Hudson ms (coalescent simulator)
library("abc")      # for approximate Bayesian computation
library("weights")  # for weighted histograms
library("abcrf")    # for ABC with random forests
library("tree")
log10theta <- log10(ref_table_params[modelV,"theta1"]) #! why only theta1
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
library("phyclust") # for a version of Hudson ms (coalescent simulator)
library("abc")      # for approximate Bayesian computation
library("weights")  # for weighted histograms
library("abcrf")    # for ABC with random forests
library("tree")
load(file = "results/workspaceFile.RData")
sim_model
load(file = "results/workspaceFile.RData")
library("phyclust") # for a version of Hudson ms (coalescent simulator)
library("abc")      # for approximate Bayesian computation
library("weights")  # for weighted histograms
library("abcrf")    # for ABC with random forests
library("tree")
sim_model
model_RF
plot(model_RF,
training=ref_table)
plot(model_RF,
training=ref_table)
model_RF <- abcrf(formula = sim_model~.,
data    = ref_table,
lda     = F,
ntree   = 500,
paral   = T)
ref_table <- data.frame(sim_model,sim_SS[,-5])
model_RF <- abcrf(formula = sim_model~.,
data    = ref_table,
lda     = F,
ntree   = 500,
paral   = T)
model_RF
plot(model_RF,
training=ref_table)
model_RF$prior.err #! How the error is calculated?
err.abcrf(model_RF,
training=ref_table,
paral=T)
model_RF$model.rf
ref_table
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions
rowSums(predict(object=model_RF$model.rf,predict.all = TRUE,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions==1) #! ??
model_selection_result_RF <- predict(object         = model_RF,
obs            = as.data.frame(rbind(target1_SS,target2_SS)),
training       = ref_table,
ntree          = 500,
paral          = T,
paral.predict  = T)
(model_selection_result_RF) #! result for each dataset
log10theta <- log10(ref_table_params[modelC,"theta0"])
ref_table <- data.frame(log10theta,sim_SS[modelC,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T)
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
log10theta <- log10(ref_table_params[modelV,"theta1"])
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
save.image(file = "results/workspaceFile.RData")
log10theta <- log10(ref_table_params[modelV,"theta0"])
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
paral     = T)
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
length(sim_model)
length(sim_SS)
sim_model <- sample(c("C","V"),size=nsim,replace=T)
sim_theta0 <- array(NA,nsim)
sim_theta0[sim_model=="C"] <- 10^runif(length(which(sim_model=="C")),min=-1,max=2)
sim_theta0[sim_model=="V"] <- 10^runif(length(which(sim_model=="V")),min=-1,max=2)
sim_theta1 <- array(NA,nsim)
sim_theta1[sim_model=="V"] <- 10^runif(length(which(sim_model=="V")),min=-1,max=2)
sim_theta1[sim_model=="C"] <- sim_theta0[sim_model=="C"] #! for population C sim_theta1=sim_theta0
sim_tau <- array(NA,nsim)
sim_tau[sim_model=="V"] <- runif(length(which(sim_model=="V")),min=0,max=2)
sim_tau[sim_model=="C"] <- 0
ref_table_params <- cbind(sim_theta0,sim_theta1,sim_tau)
colnames(ref_table_params) <- c("theta0","theta1","tau")
tbs_params <-  cbind(ref_table_params[,"theta0"],
ref_table_params[,"tau"]/ref_table_params[,"theta0"],
ref_table_params[,"theta1"]/ref_table_params[,"theta0"])
if (file.exists("data/abc_sims2.txt")){
file_removed <- file.remove("data/abc_sims2.txt")
}
ms(nsam       = sample_size,
opt        = "-t tbs -eN tbs tbs",
tbs.matrix = tbs_params,
temp.file  = "data/abc_sims2.txt")
msout <- ms.inp.multi(sample_size, nsim, ms.output.file="data/abc_sims2.txt")
sim_S        <- S(msout)
sim_pi       <- thetaPi(msout)
sim_NH       <- NH(msout)
sim_TajimasD <- tajimaD(msout, thetaW(msout), sim_pi)
sim_FayWuH   <- fayWuH(msout)
sim_FuLiD    <- fuliD(msout, thetaS1(msout) )
sim_pi       <- sim_pi[which(sim_S!=0)]
sim_NH       <- sim_NH[which(sim_S!=0)]
sim_SFS      <- sim_SFS[which(sim_S!=0)]
sim_TajimasD <- sim_TajimasD[which(sim_S!=0)]
sim_FayWuH   <- sim_FayWuH[which(sim_S!=0)]
sim_FuLiD    <- sim_FuLiD[which(sim_S!=0)]
sim_model    <- sim_model[which(sim_S!=0)]
ref_table_params <- ref_table_params[which(sim_S!=0),]
sim_S        <- sim_S[which(sim_S!=0)]
modelC <- which(sim_model=="C") #! Constant size
modelV <- which(sim_model=="V") #! Expansion
length(sim_model)
length(sim_SS)
dim(sim_SS)
dim(sim_model)
ref_table <- data.frame(sim_model,sim_SS[,-5])
dir()
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/SLiM_in_R/");
dir()
source("src/slim_model_1.r");
N_size <- as.integer(runif(3, 1000, 3000));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists('data/*.slim')){
file_removed <- file.remove('data/*.slim')
}
if (file.exists('data/*.slim')){
file_removed <- file.remove('data/*.slim')
}
if (file.exists('data/infile_N_size_1293.slim')){
file_removed <- file.remove('data/infile_N_size_1293.slim')
}
if (file.exists('data/infile_N_size_*.slim')){
file_removed <- file.remove('data/infile_N_size_*.slim')
}
if (file.exists('data/infile_N_size_[1-9][1-9][1-9][1-9].slim')){
file_removed <- file.remove('data/infile_N_size_[1-9][1-9][1-9][1-9].slim')
}
?file.exists
if (file.exists('data/infile_N_size_1234.slim')){
file_removed <- file.remove('data/infile_N_size_.slim')
}
do.call(file.remove, list(list.files('data/*.slim', full.names = TRUE)))
file.remove(dir('data/', pattern = '.txt$', full.names = TRUE))
file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
create_slim_infile(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
create_slim_infile(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/ABC_in_R") #! I added to specify wdir
seq_data         <- ms.inp.multi(sample_size, 1, ms.output.file="data/dataset1.txt")
source("src/ms.r")
seq_data         <- ms.inp.multi(sample_size, 1, ms.output.file="data/dataset1.txt")
sample_size <- 50
seq_data         <- ms.inp.multi(sample_size, 1, ms.output.file="data/dataset1.txt")
seq_data
S()
S
?ms
??ms()
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/SLiM_in_R/");
toymodel(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
N_size <- as.integer(runif(3, 1000, 3000));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
toymodel(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/slim.r");
slim(    parm = N_size,
seed = random_seeds,
filename = 'outfile_N_size',
folder = 'data/',
infile = 'infile_N_size');
random_seeds <- as.integer(runif(length(N_size), 100000, 900000));
slim(    parm = N_size,
seed = random_seeds,
filename = 'outfile_N_size',
folder = 'data/',
infile = 'infile_N_size');
sessionInfo()$running;
sessionInfo()$platform;
R.version.string;
.Platform$GUI;
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/SLiM_in_R/");
source("src/create_slim_infile.r");
N_size <- as.integer(runif(3, 100, 300));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/slim.r");
random_seeds <- as.integer(runif(length(N_size), 100000, 900000));
slim(    parm = N_size,
seed = random_seeds,
filename = 'outfile_N_size',
folder = 'data/',
infile = 'infile_N_size');
N_size <- as.integer(runif(3, 100, 300));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
