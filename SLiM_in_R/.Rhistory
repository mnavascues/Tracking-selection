library("phyclust") # for a version of Hudson ms (coalescent simulator)
library("abc")      # for approximate Bayesian computation
library("weights")  # for weighted histograms
library("abcrf")    # for ABC with random forests
library("tree")
load(file = "results/workspaceFile.RData")
sim_model
load(file = "results/workspaceFile.RData")
library("phyclust") # for a version of Hudson ms (coalescent simulator)
library("abc")      # for approximate Bayesian computation
library("weights")  # for weighted histograms
library("abcrf")    # for ABC with random forests
library("tree")
sim_model
model_RF
plot(model_RF,
training=ref_table)
plot(model_RF,
training=ref_table)
model_RF <- abcrf(formula = sim_model~.,
data    = ref_table,
lda     = F,
ntree   = 500,
paral   = T)
ref_table <- data.frame(sim_model,sim_SS[,-5])
model_RF <- abcrf(formula = sim_model~.,
data    = ref_table,
lda     = F,
ntree   = 500,
paral   = T)
model_RF
plot(model_RF,
training=ref_table)
model_RF$prior.err #! How the error is calculated?
err.abcrf(model_RF,
training=ref_table,
paral=T)
model_RF$model.rf
ref_table
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions
predict(object=model_RF$model.rf,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions
rowSums(predict(object=model_RF$model.rf,predict.all = TRUE,
data=as.data.frame(rbind(target1_SS,target2_SS)))$predictions==1) #! ??
model_selection_result_RF <- predict(object         = model_RF,
obs            = as.data.frame(rbind(target1_SS,target2_SS)),
training       = ref_table,
ntree          = 500,
paral          = T,
paral.predict  = T)
(model_selection_result_RF) #! result for each dataset
log10theta <- log10(ref_table_params[modelC,"theta0"])
ref_table <- data.frame(log10theta,sim_SS[modelC,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
paral     = T)
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
log10theta <- log10(ref_table_params[modelV,"theta1"])
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
paral     = T) #! but first dataset is constant size???
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target1_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
save.image(file = "results/workspaceFile.RData")
log10theta <- log10(ref_table_params[modelV,"theta0"])
ref_table <- data.frame(log10theta,sim_SS[modelV,])
RFmodel_theta <- regAbcrf(formula = log10theta~.,
data    = ref_table,
ntree   = 1000,
paral   = T)
plot(RFmodel_theta)
err.regAbcrf(object   = RFmodel_theta,
training = ref_table,
paral    = T)
posterior_theta_RF <- predict(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
paral     = T)
(posterior_theta_RF)
densityPlot(object    = RFmodel_theta,
obs       = as.data.frame(target2_SS),
training  = ref_table,
main      = expression(log[10]*theta),
paral     = T)
lines(density(log10theta), col="grey")
length(sim_model)
length(sim_SS)
sim_model <- sample(c("C","V"),size=nsim,replace=T)
sim_theta0 <- array(NA,nsim)
sim_theta0[sim_model=="C"] <- 10^runif(length(which(sim_model=="C")),min=-1,max=2)
sim_theta0[sim_model=="V"] <- 10^runif(length(which(sim_model=="V")),min=-1,max=2)
sim_theta1 <- array(NA,nsim)
sim_theta1[sim_model=="V"] <- 10^runif(length(which(sim_model=="V")),min=-1,max=2)
sim_theta1[sim_model=="C"] <- sim_theta0[sim_model=="C"] #! for population C sim_theta1=sim_theta0
sim_tau <- array(NA,nsim)
sim_tau[sim_model=="V"] <- runif(length(which(sim_model=="V")),min=0,max=2)
sim_tau[sim_model=="C"] <- 0
ref_table_params <- cbind(sim_theta0,sim_theta1,sim_tau)
colnames(ref_table_params) <- c("theta0","theta1","tau")
tbs_params <-  cbind(ref_table_params[,"theta0"],
ref_table_params[,"tau"]/ref_table_params[,"theta0"],
ref_table_params[,"theta1"]/ref_table_params[,"theta0"])
if (file.exists("data/abc_sims2.txt")){
file_removed <- file.remove("data/abc_sims2.txt")
}
ms(nsam       = sample_size,
opt        = "-t tbs -eN tbs tbs",
tbs.matrix = tbs_params,
temp.file  = "data/abc_sims2.txt")
msout <- ms.inp.multi(sample_size, nsim, ms.output.file="data/abc_sims2.txt")
sim_S        <- S(msout)
sim_pi       <- thetaPi(msout)
sim_NH       <- NH(msout)
sim_TajimasD <- tajimaD(msout, thetaW(msout), sim_pi)
sim_FayWuH   <- fayWuH(msout)
sim_FuLiD    <- fuliD(msout, thetaS1(msout) )
sim_pi       <- sim_pi[which(sim_S!=0)]
sim_NH       <- sim_NH[which(sim_S!=0)]
sim_SFS      <- sim_SFS[which(sim_S!=0)]
sim_TajimasD <- sim_TajimasD[which(sim_S!=0)]
sim_FayWuH   <- sim_FayWuH[which(sim_S!=0)]
sim_FuLiD    <- sim_FuLiD[which(sim_S!=0)]
sim_model    <- sim_model[which(sim_S!=0)]
ref_table_params <- ref_table_params[which(sim_S!=0),]
sim_S        <- sim_S[which(sim_S!=0)]
modelC <- which(sim_model=="C") #! Constant size
modelV <- which(sim_model=="V") #! Expansion
length(sim_model)
length(sim_SS)
dim(sim_SS)
dim(sim_model)
ref_table <- data.frame(sim_model,sim_SS[,-5])
dir()
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/SLiM_in_R/");
dir()
source("src/slim_model_1.r");
N_size <- as.integer(runif(3, 1000, 3000));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists('data/*.slim')){
file_removed <- file.remove('data/*.slim')
}
if (file.exists('data/*.slim')){
file_removed <- file.remove('data/*.slim')
}
if (file.exists('data/infile_N_size_1293.slim')){
file_removed <- file.remove('data/infile_N_size_1293.slim')
}
if (file.exists('data/infile_N_size_*.slim')){
file_removed <- file.remove('data/infile_N_size_*.slim')
}
if (file.exists('data/infile_N_size_[1-9][1-9][1-9][1-9].slim')){
file_removed <- file.remove('data/infile_N_size_[1-9][1-9][1-9][1-9].slim')
}
?file.exists
if (file.exists('data/infile_N_size_1234.slim')){
file_removed <- file.remove('data/infile_N_size_.slim')
}
do.call(file.remove, list(list.files('data/*.slim', full.names = TRUE)))
file.remove(dir('data/', pattern = '.txt$', full.names = TRUE))
file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
create_slim_infile(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
create_slim_infile(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/ABC_in_R") #! I added to specify wdir
seq_data         <- ms.inp.multi(sample_size, 1, ms.output.file="data/dataset1.txt")
source("src/ms.r")
seq_data         <- ms.inp.multi(sample_size, 1, ms.output.file="data/dataset1.txt")
sample_size <- 50
seq_data         <- ms.inp.multi(sample_size, 1, ms.output.file="data/dataset1.txt")
seq_data
S()
S
?ms
??ms()
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/SLiM_in_R/");
toymodel(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
N_size <- as.integer(runif(3, 1000, 3000));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
toymodel(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/slim.r");
slim(    parm = N_size,
seed = random_seeds,
filename = 'outfile_N_size',
folder = 'data/',
infile = 'infile_N_size');
random_seeds <- as.integer(runif(length(N_size), 100000, 900000));
slim(    parm = N_size,
seed = random_seeds,
filename = 'outfile_N_size',
folder = 'data/',
infile = 'infile_N_size');
sessionInfo()$running;
sessionInfo()$platform;
R.version.string;
.Platform$GUI;
setwd("/Users/vitorpavinato/Dropbox/PosDoc INRA 2017/SLiM_in_R/");
source("src/create_slim_infile.r");
N_size <- as.integer(runif(3, 100, 300));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/slim.r");
random_seeds <- as.integer(runif(length(N_size), 100000, 900000));
slim(    parm = N_size,
seed = random_seeds,
filename = 'outfile_N_size',
folder = 'data/',
infile = 'infile_N_size');
N_size <- as.integer(runif(3, 100, 300));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
getwd()
cat(paste0('initialize() {', '\n',
'\t', 'initializeMutationRate(', mur, ');', '\n',
'\t', 'initializeMutationType("m1",', mud1, ', "', mufd1, '",', mufv1, ');', '\n',
'\t', 'initializeMutationType("m2",', mud2, ', "', mufd2, '",', mufv2, ');', '\n',
'\t', 'initializeGenomicElementType("g1", m1, 1.0);', '\n',
'\t', 'initializeGenomicElementType("g2", m1, 1.0);', '\n',
'\t', 'initializeGenomicElement(g1, 0, 49999);', '\n',
'\t', 'initializeGenomicElement(g2, 50001, 99999);', '\n',
'\t', 'initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));', '\n',
'}', '\n\n'));
cat(paste0('initialize() {', '\n',
'\t', 'initializeMutationRate(', mur=1, ');', '\n',
'\t', 'initializeMutationType("m1",', mud1=2, ', "', mufd1=3, '",', mufv1=4, ');', '\n',
'\t', 'initializeMutationType("m2",', mud2=5, ', "', mufd2=6, '",', mufv2=7, ');', '\n',
'\t', 'initializeGenomicElementType("g1", m1, 1.0);', '\n',
'\t', 'initializeGenomicElementType("g2", m1, 1.0);', '\n',
'\t', 'initializeGenomicElement(g1, 0, 49999);', '\n',
'\t', 'initializeGenomicElement(g2, 50001, 99999);', '\n',
'\t', 'initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));', '\n',
'}', '\n\n'));
mur=2.5e-8
mur
cat(paste0('initialize() {', '\n',
'\t', 'initializeMutationRate(', mur=2.5e-8, ');', '\n',
'\t', 'initializeMutationType("m1",', mud1=0.5, ', "', mufd1="f", '",', mufv1=0.0, ');', '\n',
'\t', 'initializeMutationType("m2",', mud2=0.5, ', "', mufd2="f", '",', mufv2=0.1, ');', '\n',
'\t', 'initializeGenomicElementType("g1", m1, 1.0);', '\n',
'\t', 'initializeGenomicElementType("g2", m1, 1.0);', '\n',
'\t', 'initializeGenomicElement(g1, 0, 49999);', '\n',
'\t', 'initializeGenomicElement(g2, 50001, 99999);', '\n',
'\t', 'initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));', '\n',
'}', '\n\n'));
cat(paste0('initialize() {', '\n',
'\t', 'initializeMutationRate(', mur=2.5e-8, ');', '\n',
'\t', 'initializeMutationType("m1", ', mud1=0.5, ', "', mufd1="f", '",', mufv1=0.0, ');', '\n',
'\t', 'initializeMutationType("m2", ', mud2=0.5, ', "', mufd2="f", '",', mufv2=0.1, ');', '\n',
'\t', 'initializeGenomicElementType("g1", m1, 1.0);', '\n',
'\t', 'initializeGenomicElementType("g2", m1, 1.0);', '\n',
'\t', 'initializeGenomicElement(g1, 0, 49999);', '\n',
'\t', 'initializeGenomicElement(g2, 50001, 99999);', '\n',
'\t', 'initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));', '\n',
'}', '\n\n'));
cat(paste0('initialize() {', '\n',
'\t', 'initializeMutationRate(', mur=2.5e-8, ');', '\n',
'\t', 'initializeMutationType("m1", ', mud1=0.5, ', "', mufd1="f", '", ', mufv1=0.0, ');', '\n',
'\t', 'initializeMutationType("m2", ', mud2=0.5, ', "', mufd2="f", '", ', mufv2=0.1, ');', '\n',
'\t', 'initializeGenomicElementType("g1", m1, 1.0);', '\n',
'\t', 'initializeGenomicElementType("g2", m1, 1.0);', '\n',
'\t', 'initializeGenomicElement(g1, 0, 49999);', '\n',
'\t', 'initializeGenomicElement(g2, 50001, 99999);', '\n',
'\t', 'initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));', '\n',
'}', '\n\n'));
cat(paste0('1 { sim.addSubpop("p1",', ne[i], '); }', '\n\n'));
cat(paste0('1 { sim.addSubpop("p1",', 3, '); }', '\n\n'));
cat(paste0((3*10), 'late() {', '\n',
'\t', 'dnovo = sample(sim.subpopulations.genomes, 1);', '\n',
'\t', 'if (dnovo.countOfMutationsOfType(m2) == 0)', '\n',
'\t\t', 'dnovo.addNewDrawnMutation(m2, 0);', '\n\n',
'\t', 'm2.convertToSubstitution = F; }', '\n\n'));
cat(paste0((3*10), ' late() {', '\n',
'\t', 'dnovo = sample(sim.subpopulations.genomes, 1);', '\n',
'\t', 'if (dnovo.countOfMutationsOfType(m2) == 0)', '\n',
'\t\t', 'dnovo.addNewDrawnMutation(m2, 0);', '\n\n',
'\t', 'm2.convertToSubstitution = F; }', '\n\n'));
cat(paste0('initialize() {', '\n',
'\t', 'initializeMutationRate(', mur=2.5e-8, ');', '\n',
'\t', 'initializeMutationType("m1", ', mud1=0.5, ', "', mufd1="f", '", ', mufv1=0.0, ');', '\n',
'\t', 'initializeMutationType("m2", ', mud2=0.5, ', "', mufd2="f", '", ', mufv2=0.1, ');', '\n',
'\t', 'm2.mutationStackPolicy = "l";', '\n',
'\t', 'm1.convertToSubstitution = T;', '\n',
'\t', 'm2.convertToSubstitution = T;', '\n',
'\t', 'initializeGenomicElementType("g1", m1, 1.0);', '\n',
'\t', 'initializeGenomicElementType("g2", m1, 1.0);', '\n',
'\t', 'initializeGenomicElement(g1, 0, 49999);', '\n',
'\t', 'initializeGenomicElement(g2, 50001, 99999);', '\n',
'\t', 'initializeRecombinationRate(c(1e-8, 0.5, 1e-8), c(49999, 50000, 99999));', '\n',
'}', '\n\n'));
cat(paste0('1 { sim.addSubpop("p1",', 2, ');',
'}', '\n\n'));
cat(paste0('1 { sim.addSubpop("p1",', 3, ');', '\n',
'}', '\n\n'));
cat(paste0('1 { sim.addSubpop("p1",', 3, ');', '}', '\n\n'));
cat(paste0('1 { sim.addSubpop("p0",', 3, ');', '}', '\n\n'));
cat(paste0('1 { sim.addSubpop("p0",', 3, '); ', '}', '\n\n'));
cat(paste0((3*10)+t1=10, 'late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F); }', '\n\n'));
(3*10)+(t1=10)
cat(paste0((3*10)+(t1=10), 'late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F); }', '\n\n'));
cat(paste0((ne[i]*10)+(t2=20), 'late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F); }', '\n\n',
'\t','sim.simulationFinished();'));
cat(paste0((3*10)+(t1=10), ' late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F); }', '\n\n'));
cat(paste0((3*10)+(t1=10), ' late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F);', '\n',
'}', '\n\n'));
cat(paste0((3*10)+(t2=20), 'late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F);', '\n\n',
'\t','sim.simulationFinished();', '\n\n',
'}', '\n\n'));
cat(paste0((3*10)+(t2=20), ' late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F);', '\n\n',
'\t','sim.simulationFinished();', '\n\n',
'}', '\n\n'));
cat(paste0((3*10)+(t2=20), ' late() {', '\n',
'\t', 'allIndividuals = sim.subpopulations.individuals;', '\n',
'\t', 'sampledIndividuals = sample(allIndividuals, 100);', '\n',
'\t', 'sampledIndividuals.genomes.outputVCF(filePath = NULL, outputMultiallelics = F);', '\n\n',
'\t','sim.simulationFinished();', '\n',
'}', '\n\n'));
(1000*10)+(t1=10-1)
ls()
setwd("/Users/vitorpavinato/Documents/My_repositories/Tracking-selection/SLiM_in_R");
save(recordSessionInfo,file="results/sessionInfo.RData");
recordSessionInfo <- sessionInfo();
setwd("/Users/vitorpavinato/Documents/My_repositories/Tracking-selection/SLiM_in_R");
save(recordSessionInfo,file="results/sessionInfo.RData");
save.image(file = "results/workspaceFile.RData");
source("src/create_slim_infile.r");
N_size <- as.integer(runif(3, 100, 300));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(parm = N_size,
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/slim.r");
source("src/create_slim_infile.r");
N_size <- as.integer(runif(3, 100, 300));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(ne = N_size,
mur = 5.0e-9
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size,
mur = 5.0e-9,
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size,
mur = 5.0e-9,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
N_size <- as.integer(runif(3, 100, 300));
for (n in 1:length(N_size)){
cat(paste("You simulated sample",n,"of size N =", N_size[n],"\n"));
};
if (file.exists(dir('data/', pattern = '.slim$', full.names = TRUE))){
file_removed <- file.remove(dir('data/', pattern = '.slim$', full.names = TRUE))
}
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size,
mur = 5e-9
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size,
mur = 5e-9,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
source("src/create_slim_infile.r");
model1(ne = N_size,
filename = 'infile_N_size',
folder = 'data/');
model1(ne = N_size, n=300,
filename = 'infile_N_size',
folder = 'data/');
50704-50000
