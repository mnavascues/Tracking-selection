ts1t <- as.integer((10*ne + ts1));
int12 <- as.integer(rep(10, nsim));
ts2 <- as.integer(ts1 + int12);
ts2t <- as.integer(ts1t + int12);
parm <- cbind(simnumb, ne, n, mur, mud1, mufv1, mud2, mufv2, ts1, tst1, int12, ts2, ts2t);
parm <- cbind(simnumb, ne, n, mur, mud1, mufv1, mud2, mufv2, ts1, ts1t, int12, ts2, ts2t);
colnames(parm) <- c("Sim", "NE", "sampleS", "murate", "neuDom", "neuFitness",
"benDom", "benFitness", "sampleT1","Time1", "INT12", "sampleT2", "Time2");
priors <- as.data.frame(parm)
priors
length(priors)
width(priors)
?length
data=prior[,1]
data=priors[,1]
data
priors <- as.matrix(as.data.frame(parm))
data=priors[,1]
data
priors
simnumb <- 1:nsim;
ne <- as.integer(runif(nsim, 100, 1000));
n  <- as.integer(rep(100, nsim));
mur <- rep(2.5e-8, nsim); #
mud1 <- rep(0.5, nsim); #
mufv1 <- rep(0.0, nsim); #
mud2 <- rep(0.5, nsim); #
mufv2 <- rep(0.5, nsim); #
ts1 <- as.integer(rep(10, nsim));
ts1t <- as.integer((10*ne + ts1));
int12 <- as.integer(rep(10, nsim));
ts2 <- as.integer(ts1 + int12);
ts2t <- as.integer(ts1t + int12);
priors <- cbind(simnumb, ne, n, mur, mud1, mufv1, mud2, mufv2, ts1, ts1t, int12, ts2, ts2t);
colnames(priors) <- c("Sim", "NE", "sampleS", "murate", "neuDom", "neuFitness",
"benDom", "benFitness", "sampleT1","Time1", "INT12", "sampleT2", "Time2");
data=priors[,1]
data
dim(priors)
dim(priors)[1]
dim(data)[1]
data=priors
dim(data)[1]
simnumb <- 1:nsim;
ne <- as.integer(runif(nsim, 100, 1000));
n  <- as.integer(rep(100, nsim));
mur <- rep(2.5e-8, nsim); #
mud1 <- rep(0.5, nsim); #
mufv1 <- rep(0.0, nsim); #
mud2 <- rep(0.5, nsim); #
mufv2 <- rep(0.5, nsim); #
ts1 <- as.integer(rep(10, nsim));
ts1t <- as.integer((10*ne + ts1));
int12 <- as.integer(rep(10, nsim));
ts2 <- as.integer(ts1 + int12);
ts2t <- as.integer(ts1t + int12);
priors <- cbind(simnumb, ne, n, mur, mud1, mufv1, mud2, mufv2, ts1, ts1t, int12, ts2, ts2t);
colnames(priors) <- c("Sim", "NE", "sampleS", "murate", "neuDom", "neuFitness",
"benDom", "benFitness", "sampleT1","Time1", "INT12", "sampleT2", "Time2");
priors
source("src/create_slim_infile.r");
sessionInfo()$running;
sessionInfo()$platform;
R.version.string;
.Platform$GUI;
library(abcrf);
library(plyr); # for the convertEggLib function & join function
library(ggplot2);
library(dplyr); # for the convertEggLib function & join function
working_dir <- "/Users/vitorpavinato/Documents/My_repositories/Tracking-selection/SLiM_in_R";
if (is.na(match(working_dir,getwd()))){
setwd(working_dir)
} else {
print("Working directory have already been set")
};
priors <- read.table(file = "results/ref-tables/run1/sim_priors.txt", header = TRUE);
priors <- priors[1:1000, ];
head(priors)
globalrf <- read.table(file = "results/ref-tables/run1/global_rawrf.txt", header = TRUE);
head(globalrf)
grf <- data.frame(log10ne=log10(globalrf$ne), He=globalrf$GSS.He, Dj=globalrf$GSS.Dj,
WCst=globalrf$GSS.WCst, S=globalrf$GSS.S, thetaW=globalrf$GSS.thetaW,
D=globalrf$GSS.D, Da=globalrf$GSS.Da);
head(grf)
grf <- data.frame(ne=globalrf$ne, He=globalrf$GSS.He, Dj=globalrf$GSS.Dj,
WCst=globalrf$GSS.WCst, S=globalrf$GSS.S, thetaW=globalrf$GSS.thetaW,
D=globalrf$GSS.D, Da=globalrf$GSS.Da);
head(grf)
locusrf <- read.table(file = "results/ref-tables/run1/locus_rawrf.txt", header = TRUE);
head(locusrf)
selected <- as.factor(ifelse(locusrf$ID == "chr1:1", "A", "N"));
selected
length(selected)
lrf <- data.frame(selected=selected, lsHe=locusrf$LSS.He, lsDj=locusrf$LSS.Dj, lsWCst=locusrf$LSS.WCst,
wsS=locusrf$WSS.S, wsthetaW=locusrf$WSS.thetaW, wsD=locusrf$WSS.D, wsDa=locusrf$WSS.Da,
gsHe=locusrf$GSS.He, gsDj=locusrf$GSS.Dj, gsWCst=locusrf$GSS.WCst, gsS=locusrf$GSS.S,
gsthetaW=locusrf$GSS.thetaW, gsD=locusrf$GSS.D, gsDa=locusrf$GSS.Da);
(dim(lrf[which(lrf$selected == "A"),])[1]/1000)*100;
head(grf)
regabc <- regAbcrf(formula = ne~.,
data = grf,
ntree = 500,
paral = TRUE);
plot(regabc)
regabc$model.rf
err.regAbcrf(  object = regabc,
training = grf,
paral = TRUE)
head(lrf)
claabc <- abcrf(  formula = selected~.,
data    = lrf,
lda     = TRUE,
ntree   = 1000,
paral   = TRUE);
plot(claabc, training=lrf)
claabc$prior.err
err.abcrf(claabc,
training=lrf,
paral=TRUE)
claabc <- abcrf(  formula = selected~.,
data    = lrf,
lda     = TRUE,
ntree   = 1000,
paral   = TRUE);
plot(claabc, training=lrf)
claabc$prior.err
err.abcrf(claabc,
training=lrf,
paral=TRUE)
data <- read.table(file = "data/egglib-outputs/dataset_output_egglib_1.txt", header = TRUE);
data
obsgrf <- data.frame(He=data[1,]$GSS.He, Dj=data[1,]$GSS.Dj, WCst=data[1,]$GSS.WCst, S=data[1,]$GSS.S,
thetaW=data[1,]$GSS.thetaW, D=data[1,]$GSS.D, Da=data[1,]$GSS.Da);
obsgrf
obslrf <- data.frame(lsHe=data$LSS.He, lsDj=data$LSS.Dj, lsWCst=data$LSS.WCst,
wsS=data$WSS.S, wsthetaW=data$WSS.thetaW, wsD=data$WSS.D, wsDa=data$WSS.Da,
gsHe=data$GSS.He, gsDj=data$GSS.Dj, gsWCst=data$GSS.WCst, gsS=data$GSS.S,
gsthetaW=data$GSS.thetaW, gsD=data$GSS.D, gsDa=data$GSS.Da);
obslrf
obsgrf
regabc
grf
pred.par <- predict(object = regabc,
obs = obsgrf,
training = grf,
paral = TRUE);
pred.par$med
pred.par$quantiles
densityPlot(object    = regabc,
obs       = obsgrf,
training  = grf,
main      = expression(log[10]*"N"[e]),
paral     = TRUE)
lines(density(log10(priors$ne)), col="grey")
abline(v=log10(500), col = "red")
densityPlot(object    = regabc,
obs       = obsgrf,
training  = grf,
main      = expression(log[10]*"N"[e]),
paral     = TRUE)
lines(density(priors$ne), col="grey")
abline(v=500, col = "red")
pdf(file = "results/figures/run1/regression_abc_posterior_orig.pdf")
densityPlot(object    = regabc,
obs       = obsgrf,
training  = grf,
main      = expression("N"[e]),
paral     = TRUE)
lines(density(priors$ne), col="grey")
abline(v=500, col = "red")
dev.off();
predict(object = claabc$model.rf,  data = obslrf)$predictions
rowSums(predict(object=claabc$model.rf, predict.all = TRUE,data=obslrf)$predictions==1)
selected_locus <- predict(       object  = claabc,
obs  = obslrf,
training = lrf,
ntree = 1000,
paral = TRUE,
paral.predict  = TRUE);
(selected_locus)
selected_locus$allocation[which(selected_locus$allocation == "A") ];
plot(selected_locus$vote, main = "Loci Classification",
col = ifelse(selected_locus$allocation == "A", "red", "blue"),
pch = ifelse(selected_locus$allocation == "A", 19, 1))
abline(v=0.95, col = "red", lty = 2)
post_probA <- ifelse(selected_locus$allocation == "A",
selected_locus$post.prob,
(1-selected_locus$post.prob));
chr_pos <- as.character(data$ID);
chr_splitted <- strsplit(chr_pos, "\\:"); chr_splitted <- do.call(rbind, chr_splitted);
genescan <- data.frame(   snp = 1:length(chr_splitted[,2]),
chr = ifelse(chr_splitted[,1]=="chr1", 1, 2),
pos = as.numeric(chr_splitted[,2]),
classy = selected_locus$allocation,
prob = post_probA);
genescan[which(genescan$classy == "A"), ]
p <- ggplot(genescan, aes(y = prob, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("black", "grey")) +
facet_wrap("chr") +
xlab("Position") +
ylab("Posterior probability")
p
obslrf
genescan <- data.frame(   snp = 1:length(chr_splitted[,2]),
chr = ifelse(chr_splitted[,1]=="chr1", 1, 2),
pos = as.numeric(chr_splitted[,2]),
classy = selected_locus$allocation,
prob = post_probA,
fst = obslrf$lsWCst,
he = obslrf$lsHe);
genescan[which(genescan$classy == "A"), ]
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST]))
p
p <- ggplot(genescan, aes(y = fst, x = he)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab(expression("H"[E])) +
ylab(expression("F"[ST]))
p
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST])) +
geom_hline(yintercept = 0.211504)
p
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST])) +
geom_hline(yintercept = 0.211504, aes(color = "#fb8072"))
p
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST])) +
geom_hline(yintercept = 0.211504, color = "#fb8072")
p
pdf(file = "results/figures/run1/classification_abc_manhattan_fst.pdf")
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST])) +
geom_hline(yintercept = 0.211504, color = "#fb8072")
p
dev.off();
pdf(file = "results/figures/run1/classification_abc_fstout.pdf")
p <- ggplot(genescan, aes(y = fst, x = he)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab(expression("H"[E])) +
ylab(expression("F"[ST]))
p
dev.off();
claabc <- abcrf(  formula = selected~.,
data    = lrf,
lda     = TRUE,
ntree   = 900,
paral   = TRUE);
plot(claabc, training=lrf)
claabc$prior.err
err.abcrf(claabc,
training=lrf,
paral=TRUE)
densityPlot(object    = regabc,
obs       = obsgrf,
training  = grf,
main      = expression("N"[e]),
paral     = TRUE)
lines(density(priors$ne), col="grey")
abline(v=500, col = "red")
selected_locus <- predict(       object  = claabc,
obs  = obslrf,
training = lrf,
ntree = 900,
paral = TRUE,
paral.predict  = TRUE);
(selected_locus)
selected_locus$allocation[which(selected_locus$allocation == "A") ];
plot(selected_locus$vote, main = "Loci Classification",
col = ifelse(selected_locus$allocation == "A", "red", "blue"),
pch = ifelse(selected_locus$allocation == "A", 19, 1))
abline(v=0.95, col = "red", lty = 2)
post_probA <- ifelse(selected_locus$allocation == "A",
selected_locus$post.prob,
(1-selected_locus$post.prob));
chr_pos <- as.character(data$ID);
chr_splitted <- strsplit(chr_pos, "\\:"); chr_splitted <- do.call(rbind, chr_splitted);
genescan <- data.frame(   snp = 1:length(chr_splitted[,2]),
chr = ifelse(chr_splitted[,1]=="chr1", 1, 2),
pos = as.numeric(chr_splitted[,2]),
classy = selected_locus$allocation,
prob = post_probA,
fst = obslrf$lsWCst,
he = obslrf$lsHe);
genescan[which(genescan$classy == "A"), ]
p <- ggplot(genescan, aes(y = prob, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("black", "grey")) +
facet_wrap("chr") +
xlab("Position") +
ylab("Posterior probability")
p
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST])) +
geom_hline(yintercept = 0.211504, color = "#fb8072")
p
p <- ggplot(genescan, aes(y = fst, x = he)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab(expression("H"[E])) +
ylab(expression("F"[ST]))
p
(dim(lrf[which(lrf$selected == "A"),])[1]/1000)*100;
claabc <- abcrf(  formula = selected~.,
data    = lrf,
lda     = TRUE,
ntree   = 500,
paral   = TRUE);
claabc <- abcrf(  formula = selected~.,
data    = lrf,
lda     = FALSE,
ntree   = 500,
paral   = TRUE);
plot(claabc, training=lrf)
claabc$prior.err
err.abcrf(claabc,
training=lrf,
paral=TRUE)
pred.par <- predict(object = regabc,
obs = obsgrf,
training = grf,
paral = TRUE);
pred.par$med
pred.par$quantiles
densityPlot(object    = regabc,
obs       = obsgrf,
training  = grf,
main      = expression("N"[e]),
paral     = TRUE)
lines(density(priors$ne), col="grey")
abline(v=500, col = "red")
predict(object = claabc$model.rf,  data = obslrf)$predictions
rowSums(predict(object=claabc$model.rf, predict.all = TRUE,data=obslrf)$predictions==1)
selected_locus <- predict(       object  = claabc,
obs  = obslrf,
training = lrf,
ntree = 500,
paral = TRUE,
paral.predict  = TRUE);
(selected_locus)
selected_locus$allocation[which(selected_locus$allocation == "A") ];
plot(selected_locus$vote, main = "Loci Classification",
col = ifelse(selected_locus$allocation == "A", "red", "blue"),
pch = ifelse(selected_locus$allocation == "A", 19, 1))
abline(v=0.95, col = "red", lty = 2)
post_probA <- ifelse(selected_locus$allocation == "A",
selected_locus$post.prob,
(1-selected_locus$post.prob));
chr_pos <- as.character(data$ID);
chr_splitted <- strsplit(chr_pos, "\\:"); chr_splitted <- do.call(rbind, chr_splitted);
genescan <- data.frame(   snp = 1:length(chr_splitted[,2]),
chr = ifelse(chr_splitted[,1]=="chr1", 1, 2),
pos = as.numeric(chr_splitted[,2]),
classy = selected_locus$allocation,
prob = post_probA,
fst = obslrf$lsWCst,
he = obslrf$lsHe);
genescan[which(genescan$classy == "A"), ]
p <- ggplot(genescan, aes(y = prob, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("black", "grey")) +
facet_wrap("chr") +
xlab("Position") +
ylab("Posterior probability")
p
pdf(file = "results/figures/run1/classification_abc_manhattan.pdf")
p <- ggplot(genescan, aes(y = prob, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("black", "grey")) +
facet_wrap("chr") +
xlab("Position") +
ylab("Posterior probability")
p
dev.off();
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST])) +
geom_hline(yintercept = 0.211504, color = "#fb8072")
p
pdf(file = "results/figures/run1/classification_abc_manhattan_fst.pdf")
p <- ggplot(genescan, aes(y = fst, x = pos)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab("Position") +
ylab(expression("F"[ST])) +
geom_hline(yintercept = 0.211504, color = "#fb8072")
p
dev.off();
p <- ggplot(genescan, aes(y = fst, x = he)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab(expression("H"[E])) +
ylab(expression("F"[ST]))
p
pdf(file = "results/figures/run1/classification_abc_fstout.pdf")
p <- ggplot(genescan, aes(y = fst, x = he)) +
geom_point(aes(colour = factor(chr))) +
scale_color_manual(values=c("#e41a1c", "#377eb8")) +
facet_wrap("chr") +
xlab(expression("H"[E])) +
ylab(expression("F"[ST]))
p
dev.off();
lrf
locusrf
post_probA
genescan
selected_locus$allocation
(selected_locus)
selected_locus$allocation[which(selected_locus$allocation == "A") ];
genescan[which(genescan$classy == "A"), ]
dat <- structure(list(chromosome = 1:2, size = c(50000L, 50000L)),
.Names = c("chr", "size"), class = "data.frame", row.names = c(NA, -2L))
dat
bp <- barplot(dat$size, border=NA, col="grey80")
with(genescan,
segments(
bp[chr,]-0.5,
pos,
bp[chr,]+0.5,
pos,
col=classy,
lwd=2,
lend=1
)
)
?segments
classycol <- ifelse(genescan$classy == "N", "#74a9cf", "#e34a33")
classycol
with(genescan,
segments(
bp[chr,]-0.5,
pos,
bp[chr,]+0.5,
pos,
col=classycol,
lwd=2,
lend=1
)
)
bp <- barplot(dat$size, border=NA, col="grey80", names.arg = c("chr 1", "chr 2"))
with(genescan,
segments(
bp[chr,]-0.5,
pos,
bp[chr,]+0.5,
pos,
col=classycol,
lwd=2,
lend=1
)
)
pdf(file = "results/figures/run1/classification_abc_chr.pdf")
bp <- barplot(dat$size, border=NA, col="grey80", names.arg = c("chr 1", "chr 2"))
with(genescan,
segments(
bp[chr,]-0.5,
pos,
bp[chr,]+0.5,
pos,
col=classycol,
lwd=2,
lend=1
)
)
dev.off();
dat$size
dat
genescan
bp[chr,]-0.5
bp[genescan$chr,]-0.5
bp[genescan$chr,]+0.5
chrstruct <- structure(list(chromosome = 1:2, size = c(50000L, 50000L)),
.Names = c("chr", "size"), class = "data.frame", row.names = c(NA, -2L))
bp <- barplot(chrstruct$size, border=NA, col="grey80", names.arg = c("chr 1", "chr 2"))
with(genescan,segments(bp[chr,]-0.5, pos, bp[chr,]+0.5, pos, col=classycol, lwd=2, lend=1))
